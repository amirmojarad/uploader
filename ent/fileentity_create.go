// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"uploader/ent/fileentity"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FileEntityCreate is the builder for creating a FileEntity entity.
type FileEntityCreate struct {
	config
	mutation *FileEntityMutation
	hooks    []Hook
}

// Mutation returns the FileEntityMutation object of the builder.
func (fec *FileEntityCreate) Mutation() *FileEntityMutation {
	return fec.mutation
}

// Save creates the FileEntity in the database.
func (fec *FileEntityCreate) Save(ctx context.Context) (*FileEntity, error) {
	var (
		err  error
		node *FileEntity
	)
	if len(fec.hooks) == 0 {
		if err = fec.check(); err != nil {
			return nil, err
		}
		node, err = fec.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FileEntityMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = fec.check(); err != nil {
				return nil, err
			}
			fec.mutation = mutation
			if node, err = fec.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(fec.hooks) - 1; i >= 0; i-- {
			if fec.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = fec.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, fec.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*FileEntity)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from FileEntityMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (fec *FileEntityCreate) SaveX(ctx context.Context) *FileEntity {
	v, err := fec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fec *FileEntityCreate) Exec(ctx context.Context) error {
	_, err := fec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fec *FileEntityCreate) ExecX(ctx context.Context) {
	if err := fec.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fec *FileEntityCreate) check() error {
	return nil
}

func (fec *FileEntityCreate) sqlSave(ctx context.Context) (*FileEntity, error) {
	_node, _spec := fec.createSpec()
	if err := sqlgraph.CreateNode(ctx, fec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (fec *FileEntityCreate) createSpec() (*FileEntity, *sqlgraph.CreateSpec) {
	var (
		_node = &FileEntity{config: fec.config}
		_spec = &sqlgraph.CreateSpec{
			Table: fileentity.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: fileentity.FieldID,
			},
		}
	)
	return _node, _spec
}

// FileEntityCreateBulk is the builder for creating many FileEntity entities in bulk.
type FileEntityCreateBulk struct {
	config
	builders []*FileEntityCreate
}

// Save creates the FileEntity entities in the database.
func (fecb *FileEntityCreateBulk) Save(ctx context.Context) ([]*FileEntity, error) {
	specs := make([]*sqlgraph.CreateSpec, len(fecb.builders))
	nodes := make([]*FileEntity, len(fecb.builders))
	mutators := make([]Mutator, len(fecb.builders))
	for i := range fecb.builders {
		func(i int, root context.Context) {
			builder := fecb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FileEntityMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (fecb *FileEntityCreateBulk) SaveX(ctx context.Context) []*FileEntity {
	v, err := fecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fecb *FileEntityCreateBulk) Exec(ctx context.Context) error {
	_, err := fecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fecb *FileEntityCreateBulk) ExecX(ctx context.Context) {
	if err := fecb.Exec(ctx); err != nil {
		panic(err)
	}
}
